# This is a basic workflow to help you get started with Actions

name: fwf-ci-cd

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
env:
    AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}    # set this to your Azure Subscription Id
    AZURE_RESOURCEGROUP_NAME: fwf-rg                      # set this to your preferred resource group name
    SQLSERVER_NAME: fwf-db-srv                          # set this to your preferred sql server name
    DATABASE_NAME: fwfdb                   # set this to your preferred sql database name
    SQLADMIN_LOGIN: ${{ secrets.SQLADMIN_LOGIN  }}                # Create a secret in your Github repo for the SQL Admin login name you want to use
    SQLADMIN_PASS: ${{ secrets.SQLADMIN_PASS  }}                 # Create a secret in your Github repo for the SQL Admin password you want to use
    FWF_APP_SERVICE_PLAN_NAME: fwf-app-service
    FWF_FLIGHT_SERVICE_NAME: fwf-flight-service
    FWF_SOLUTION_PATH: repo/FWF/
    FWF_FLIGHT_SERVICE_PATH: repo/FWF/backend/FWF.FlightSearchService.App
    FWF_FLIGHT_SERVICE_PROJECT: FWF.FlightSearchService.App.csproj
    FWF_FLIGHT_SERVICE_PUBLISH_PROFILE: ${{ secrets.FLIGHT_SERVICE_PUBLISH_PROFILE }}
    DOTNET_VERSION: '8.0.x'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          path: repo

      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 

      # Restore dependencies
      - name: Restore dependencies
        run: |
          dotnet restore ${{env.FWF_SOLUTION_PATH}}/FWF.sln

      # Run dotnet build and publish
      - name: Build and Publish
        run: |
          dotnet build ${{env.FWF_SOLUTION_PATH}}/FWF.sln --configuration Release --no-restore
          dotnet publish ${{env.FWF_SOLUTION_PATH}}/FWF.sln -c Release -o ${{env.FWF_SOLUTION_PATH}}/publish
      
      #Run Test
      - name: Run Unit Tests
        run: |
          dotnet test ${{env.FWF_SOLUTION_PATH}}/FWF.sln

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.FWF_ENV_SPN }}

      - name: create db connection string
        run: |
          CONN_STR=$(az sql db show-connection-string --client ado.net --server ${{ env.SQLSERVER_NAME }} --name ${{ env.DATABASE_NAME }} -o tsv)
          echo "$CONN_STR"
          CONN_STR=$(echo $CONN_STR | sed "s/<username>/${{ env.SQLADMIN_LOGIN }}/g")
          echo "$CONN_STR"
          CONN_STR=$(echo $CONN_STR | sed "s/<password>/${{ env.SQLADMIN_PASS }}/g")
          echo "SQL_DB_CONN_STR=$CONN_STR" >> $GITHUB_ENV

      - name: Install dotnet-ef & Update Database
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project ${{env.FWF_SOLUTION_PATH}}/common/FWF.Dal/FWF.Dal.csproj --startup-project ${{env.FWF_FLIGHT_SERVICE_PATH}}/${{env.FWF_FLIGHT_SERVICE_PROJECT}}
        env:
          ConnectionStrings__CEMSDatabase: ${{ env.SQL_DB_CONN_STR }}


      # Deploy to Azure Web apps staging slot
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.FWF_FLIGHT_SERVICE_NAME }} # Replace with your app name
          publish-profile: ${{ secrets.FLIGHT_SERVICE_PUBLISH_PROFILE }} # Define secret variable in repository settings as per action documentation
          package: '${{ env.FWF_FLIGHT_SERVICE_PATH }}/myapp'
          slot-name: staging

      - name: Swap to production slot
        run: |
          az webapp deployment slot swap --resource-group ${{ env.AZURE_RESOURCEGROUP_NAME }} --name ${{ env.FWF_FLIGHT_SERVICE_NAME }} --slot staging --target-slot production
          echo "Swap finished. Flight Search Service Application URL: https://$(az webapp show --resource-group ${{ env.AZURE_RESOURCEGROUP_NAME }} --name ${{ env.FWF_FLIGHT_SERVICE_NAME }} --query hostNames[0] -o tsv)"
